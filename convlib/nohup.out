Traceback (most recent call last):
  File "classifier.py", line 4, in <module>
    from LCS import LCS, parcel_propagation
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/site-packages/LCS/__init__.py", line 1, in <module>
    from LCS.LCS import *
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/site-packages/LCS/LCS.py", line 11, in <module>
    from numba import jit
ModuleNotFoundError: No module named 'numba'
Traceback (most recent call last):
  File "classifier.py", line 9, in <module>
    from convlib.xr_tools import get_seq_mask, get_xr_seq
ModuleNotFoundError: No module named 'convlib'
*---- Calling classifier with method lagrangian ----*
Apply classifier in the following domain
{'time': slice('2020-01-01T00:00:00', '2020-12-31T18:00:00', None), 'latitude': slice(30, -80, None), 'longitude': slice(-140, -1, None)}
*---- Reading input data ----*
<xarray.DataArray 'p71.162' (time: 108, latitude: 721, longitude: 1440)>
[112129920 values with dtype=float32]
Coordinates:
  * longitude  (longitude) float32 0.0 0.25 0.5 0.75 ... 359.25 359.5 359.75
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * time       (time) datetime64[ns] 2020-01-01 ... 2020-01-27T18:00:00
Attributes:
    units:      kg m**-1 s**-1
    long_name:  Vertical integral of eastward water vapour flux
Applying unit conversion
Done unit conversion
*---- NOT Start interp ----*
*---- Finish interp ----*
*---- Done reading ----*
*---- Applying classification method ----*
lcs_time_len 4
[0, 1, 2, 3]
<xarray.Dataset>
Dimensions:    (latitude: 441, longitude: 557, seq: 4, time: 105)
Coordinates:
  * latitude   (latitude) float32 30.0 29.75 29.5 29.25 ... -79.5 -79.75 -80.0
  * longitude  (longitude) float32 -140.0 -139.75 -139.5 ... -1.5 -1.25 -1.0
  * time       (time) datetime64[ns] 2020-01-01 ... 2020-01-27
  * seq        (seq) int64 0 1 2 3
Data variables:
    u          (seq, time, latitude, longitude) float32 -11.702636 ... 5.364295
    v          (seq, time, latitude, longitude) float32 -3.8871298 ... 3.8758447
<xarray.Dataset>
Dimensions:    (latitude: 441, longitude: 557, seq: 4)
Coordinates:
  * latitude   (latitude) float32 30.0 29.75 29.5 29.25 ... -79.5 -79.75 -80.0
  * longitude  (longitude) float32 -140.0 -139.75 -139.5 ... -1.5 -1.25 -1.0
    time       datetime64[ns] 2020-01-01
  * seq        (seq) int64 0 1 2 3
Data variables:
    u          (seq, latitude, longitude) float32 -11.702636 ... 2.4699466
    v          (seq, latitude, longitude) float32 -3.8871298 ... -4.5773916
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
concurrent.futures.process._RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/process.py", line 239, in _process_worker
    r = call_item.fn(*call_item.args, **call_item.kwargs)
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/process.py", line 198, in _process_chunk
    return [fn(*args) for args in chunk]
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/process.py", line 198, in <listcomp>
    return [fn(*args) for args in chunk]
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/site-packages/LCS/LCS.py", line 100, in __call__
    def_tensor = compute_deformation_tensor(u, v, timestep, verbose=verbose)
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/site-packages/LCS/LCS.py", line 129, in compute_deformation_tensor
    x_departure, y_departure = parcel_propagation(u, v, timestep, propdim=self.timedim,
NameError: name 'self' is not defined
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "classifier.py", line 263, in <module>
    find_departure=find_departure, parallel=parallel, subtimes_len=subtimes_len)
  File "classifier.py", line 89, in __call__
    classified_array = self._lagrangian_method(u, v, lcs_type, lcs_time_len, find_departure=find_departure)
  File "classifier.py", line 215, in _lagrangian_method
    for i, resulting_array in enumerate(executor.map(lcs, input_arrays)):
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/process.py", line 483, in _chain_from_iterable_of_lists
    for element in iterable:
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/_base.py", line 598, in result_iterator
    yield fs.pop().result()
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/_base.py", line 435, in result
    return self.__get_result()
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
NameError: name 'self' is not defined
*---- Calling classifier with method lagrangian ----*
Apply classifier in the following domain
{'time': slice('2020-01-01T00:00:00', '2020-12-31T18:00:00', None), 'latitude': slice(30, -80, None), 'longitude': slice(-140, -1, None)}
*---- Reading input data ----*
<xarray.DataArray 'p71.162' (time: 108, latitude: 721, longitude: 1440)>
[112129920 values with dtype=float32]
Coordinates:
  * longitude  (longitude) float32 0.0 0.25 0.5 0.75 ... 359.25 359.5 359.75
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * time       (time) datetime64[ns] 2020-01-01 ... 2020-01-27T18:00:00
Attributes:
    units:      kg m**-1 s**-1
    long_name:  Vertical integral of eastward water vapour flux
Applying unit conversion
Done unit conversion
*---- NOT Start interp ----*
*---- Finish interp ----*
*---- Done reading ----*
*---- Applying classification method ----*
lcs_time_len 4
[0, 1, 2, 3]
<xarray.Dataset>
Dimensions:    (latitude: 441, longitude: 557, seq: 4, time: 105)
Coordinates:
  * latitude   (latitude) float32 30.0 29.75 29.5 29.25 ... -79.5 -79.75 -80.0
  * longitude  (longitude) float32 -140.0 -139.75 -139.5 ... -1.5 -1.25 -1.0
  * time       (time) datetime64[ns] 2020-01-01 ... 2020-01-27
  * seq        (seq) int64 0 1 2 3
Data variables:
    u          (seq, time, latitude, longitude) float32 -11.702636 ... 5.364295
    v          (seq, time, latitude, longitude) float32 -3.8871298 ... 3.8758447
<xarray.Dataset>
Dimensions:    (latitude: 441, longitude: 557, seq: 4)
Coordinates:
  * latitude   (latitude) float32 30.0 29.75 29.5 29.25 ... -79.5 -79.75 -80.0
  * longitude  (longitude) float32 -140.0 -139.75 -139.5 ... -1.5 -1.25 -1.0
    time       datetime64[ns] 2020-01-01
  * seq        (seq) int64 0 1 2 3
Data variables:
    u          (seq, latitude, longitude) float32 -11.702636 ... 2.4699466
    v          (seq, latitude, longitude) float32 -3.8871298 ... -4.5773916
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
*---- Computing deformation tensor ----*
concurrent.futures.process._RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/process.py", line 239, in _process_worker
    r = call_item.fn(*call_item.args, **call_item.kwargs)
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/process.py", line 198, in _process_chunk
    return [fn(*args) for args in chunk]
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/process.py", line 198, in <listcomp>
    return [fn(*args) for args in chunk]
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/site-packages/LCS/LCS.py", line 100, in __call__
    def_tensor = compute_deformation_tensor(u, v, timestep, verbose=verbose)
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/site-packages/LCS/LCS.py", line 129, in compute_deformation_tensor
    x_departure, y_departure = parcel_propagation(u, v, timestep, propdim=self.timedim,
NameError: name 'self' is not defined
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "classifier.py", line 263, in <module>
    find_departure=find_departure, parallel=parallel, subtimes_len=subtimes_len)
  File "classifier.py", line 89, in __call__
    classified_array = self._lagrangian_method(u, v, lcs_type, lcs_time_len, find_departure=find_departure)
  File "classifier.py", line 215, in _lagrangian_method
    for i, resulting_array in enumerate(executor.map(lcs, input_arrays)):
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/process.py", line 483, in _chain_from_iterable_of_lists
    for element in iterable:
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/_base.py", line 598, in result_iterator
    yield fs.pop().result()
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/_base.py", line 435, in result
    return self.__get_result()
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
NameError: name 'self' is not defined
*---- Calling classifier with method lagrangian ----*
Apply classifier in the following domain
{'time': slice('2020-01-01T00:00:00', '2020-12-31T18:00:00', None), 'latitude': slice(30, -80, None), 'longitude': slice(-140, -1, None)}
*---- Reading input data ----*
<xarray.DataArray 'p71.162' (time: 108, latitude: 721, longitude: 1440)>
[112129920 values with dtype=float32]
Coordinates:
  * longitude  (longitude) float32 0.0 0.25 0.5 0.75 ... 359.25 359.5 359.75
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * time       (time) datetime64[ns] 2020-01-01 ... 2020-01-27T18:00:00
Attributes:
    units:      kg m**-1 s**-1
    long_name:  Vertical integral of eastward water vapour flux
Applying unit conversion
Done unit conversion
*---- NOT Start interp ----*
*---- Finish interp ----*
*---- Done reading ----*
*---- Applying classification method ----*
lcs_time_len 4
[0, 1, 2, 3]
<xarray.Dataset>
Dimensions:    (latitude: 441, longitude: 557, seq: 4, time: 105)
Coordinates:
  * longitude  (longitude) float32 -140.0 -139.75 -139.5 ... -1.5 -1.25 -1.0
  * time       (time) datetime64[ns] 2020-01-01 ... 2020-01-27
  * latitude   (latitude) float32 30.0 29.75 29.5 29.25 ... -79.5 -79.75 -80.0
  * seq        (seq) int64 0 1 2 3
Data variables:
    u          (seq, time, latitude, longitude) float32 -11.702636 ... 5.364295
    v          (seq, time, latitude, longitude) float32 -3.8871298 ... 3.8758447
<xarray.Dataset>
Dimensions:    (latitude: 441, longitude: 557, seq: 4)
Coordinates:
  * longitude  (longitude) float32 -140.0 -139.75 -139.5 ... -1.5 -1.25 -1.0
    time       datetime64[ns] 2020-01-01
  * latitude   (latitude) float32 30.0 29.75 29.5 29.25 ... -79.5 -79.75 -80.0
  * seq        (seq) int64 0 1 2 3
Data variables:
    u          (seq, latitude, longitude) float32 -11.702636 ... 2.4699466
    v          (seq, latitude, longitude) float32 -3.8871298 ... -4.5773916
*---- Computing deformation tensor ----*
Traceback (most recent call last):
  File "classifier.py", line 263, in <module>
    find_departure=find_departure, parallel=parallel, subtimes_len=subtimes_len)
  File "classifier.py", line 89, in __call__
    classified_array = self._lagrangian_method(u, v, lcs_type, lcs_time_len, find_departure=find_departure)
  File "classifier.py", line 220, in _lagrangian_method
    array_list.append(lcs(input_array, verbose=True))
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/site-packages/LCS/LCS.py", line 100, in __call__
    def_tensor = compute_deformation_tensor(u, v, timestep, verbose=verbose)
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/site-packages/LCS/LCS.py", line 129, in compute_deformation_tensor
    x_departure, y_departure = parcel_propagation(u, v, timestep, propdim=self.timedim,
NameError: name 'self' is not defined
*---- Calling classifier with method lagrangian ----*
Apply classifier in the following domain
{'time': slice('2020-01-01T00:00:00', '2020-12-31T18:00:00', None), 'latitude': slice(30, -80, None), 'longitude': slice(-140, -1, None)}
*---- Reading input data ----*
<xarray.DataArray 'p71.162' (time: 108, latitude: 721, longitude: 1440)>
[112129920 values with dtype=float32]
Coordinates:
  * longitude  (longitude) float32 0.0 0.25 0.5 0.75 ... 359.25 359.5 359.75
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * time       (time) datetime64[ns] 2020-01-01 ... 2020-01-27T18:00:00
Attributes:
    units:      kg m**-1 s**-1
    long_name:  Vertical integral of eastward water vapour flux
Applying unit conversion
Done unit conversion
*---- NOT Start interp ----*
*---- Finish interp ----*
*---- Done reading ----*
*---- Applying classification method ----*
lcs_time_len 4
[0, 1, 2, 3]
<xarray.Dataset>
Dimensions:    (latitude: 441, longitude: 557, seq: 4, time: 105)
Coordinates:
  * latitude   (latitude) float32 30.0 29.75 29.5 29.25 ... -79.5 -79.75 -80.0
  * longitude  (longitude) float32 -140.0 -139.75 -139.5 ... -1.5 -1.25 -1.0
  * time       (time) datetime64[ns] 2020-01-01 ... 2020-01-27
  * seq        (seq) int64 0 1 2 3
Data variables:
    u          (seq, time, latitude, longitude) float32 -11.702636 ... 5.364295
    v          (seq, time, latitude, longitude) float32 -3.8871298 ... 3.8758447
<xarray.Dataset>
Dimensions:    (latitude: 441, longitude: 557, seq: 4)
Coordinates:
  * latitude   (latitude) float32 30.0 29.75 29.5 29.25 ... -79.5 -79.75 -80.0
  * longitude  (longitude) float32 -140.0 -139.75 -139.5 ... -1.5 -1.25 -1.0
    time       datetime64[ns] 2020-01-01
  * seq        (seq) int64 0 1 2 3
Data variables:
    u          (seq, latitude, longitude) float32 -11.702636 ... 2.4699466
    v          (seq, latitude, longitude) float32 -3.8871298 ... -4.5773916
*---- Computing deformation tensor ----*
Propagating time 3
Propagating subtime 0
Propagating time 2
Propagating subtime 0
Propagating time 1
Propagating subtime 0
Propagating time 0
Propagating subtime 0
Traceback (most recent call last):
  File "classifier.py", line 263, in <module>
    find_departure=find_departure, parallel=parallel, subtimes_len=subtimes_len)
  File "classifier.py", line 89, in __call__
    classified_array = self._lagrangian_method(u, v, lcs_type, lcs_time_len, find_departure=find_departure)
  File "classifier.py", line 220, in _lagrangian_method
    array_list.append(lcs(input_array, verbose=True))
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/site-packages/LCS/LCS.py", line 102, in __call__
    def_tensor = compute_deformation_tensor(x_departure, y_departure, timestep, verbose=verbose)
  File "/home/gab/software/miniconda3/envs/phd37/lib/python3.7/site-packages/LCS/LCS.py", line 133, in compute_deformation_tensor
    conversion_dydx = xr.apply_ufunc(lambda x: np.cos(x * np.pi / 180), y_departure.latitude)
AttributeError: 'numpy.ndarray' object has no attribute 'latitude'
